{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "d03bd3ee-f36b-41d9-b6a6-426168380e3d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Initial Dataset Info:\n",
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 505 entries, 0 to 504\n",
      "Data columns (total 7 columns):\n",
      " #   Column          Non-Null Count  Dtype  \n",
      "---  ------          --------------  -----  \n",
      " 0   Patient_ID      505 non-null    int64  \n",
      " 1   Age             505 non-null    int64  \n",
      " 2   Gender          484 non-null    object \n",
      " 3   Blood_Pressure  475 non-null    float64\n",
      " 4   Cholesterol     485 non-null    float64\n",
      " 5   Diabetes        505 non-null    object \n",
      " 6   Heart_Disease   505 non-null    object \n",
      "dtypes: float64(2), int64(2), object(3)\n",
      "memory usage: 27.7+ KB\n",
      "None\n",
      "\n",
      "Missing Values:\n",
      "Patient_ID         0\n",
      "Age                0\n",
      "Gender            21\n",
      "Blood_Pressure    30\n",
      "Cholesterol       20\n",
      "Diabetes           0\n",
      "Heart_Disease      0\n",
      "dtype: int64\n",
      "\n",
      "Duplicate Records Count: 5\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\K.vennela\\AppData\\Local\\Temp\\ipykernel_16400\\3828950966.py:18: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n",
      "The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n",
      "\n",
      "For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n",
      "\n",
      "\n",
      "  df[column].fillna(df[column].median(), inplace=True)  # Median imputation for numerical columns\n",
      "C:\\Users\\K.vennela\\AppData\\Local\\Temp\\ipykernel_16400\\3828950966.py:21: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n",
      "The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n",
      "\n",
      "For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n",
      "\n",
      "\n",
      "  df[column].fillna(df[column].mode()[0], inplace=True)  # Mode imputation for categorical columns\n"
     ]
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAz8AAAJpCAYAAACD9YwdAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjkuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8hTgPZAAAACXBIWXMAAA9hAAAPYQGoP6dpAABPi0lEQVR4nO3deXxNd+L/8feVyM0ii6USaePaYxCqDKWLKKpUjWk7OkVrq7FUZ2Ktlla0KWpatNY2jaWldErRzqAo1SodW9XO1BAMsScR2SQ5vz/6dX+uJOSq5CQ5r+fjcR/cz/nce983kva+c875HJthGIYAAAAAoJQrY3YAAAAAACgKlB8AAAAAlkD5AQAAAGAJlB8AAAAAlkD5AQAAAGAJlB8AAAAAlkD5AQAAAGAJlB8AAAAAlkD5AQAAAGAJlB8Apc68efNks9lcbnfddZciIyP1z3/+0+x4TtWqVVOvXr3cflxqaqqio6P17bffuv3YPXv2yGazqWzZsjp9+nSecz777DPVr19fPj4+stls2rVrl2bOnKl58+a5/Xq/1dWrVzVr1iy1aNFCgYGB8vHx0e9+9zuNGjVKFy5cuO3n3b9/v6Kjo3Xs2LFc23r16qVq1aq5jN3uv9XtiIyMVIMGDfLcdv78edlsNkVHRxdJlhvl9bW5Mc+3334rm812W9+fAFDYKD8ASq25c+dqy5Yt2rx5sz788EN5eHjoiSee0FdffWV2tN8kNTVV48aNu60Plx999JEkKSsrSx9//HGu7efOndNzzz2nmjVravXq1dqyZYvq1KljSvlJTU1Vu3bt9NJLL6lx48ZatGiRVq5cqeeee04ffvihGjdurEOHDt3Wc+/fv1/jxo3Ls/zkZdmyZXrttddu67Ws5r777tOWLVt03333mR0FAHLxNDsAABSWBg0aqGnTps77jz32mMqXL69FixbpiSeeMDGZOTIyMrRw4UI1atRI58+f15w5c/Tyyy+7zDl8+LCuXr2qHj16qFWrVoWaxzAMpaeny8fHJ8/tQ4YM0caNG7V48WI988wzzvHWrVvr6aefVrNmzfTUU0/p559/loeHR6Fmbdy48R17rlu975IuICBA999/v9kxACBP7PkBYBne3t7y8vJS2bJlXcYvXryoQYMG6e6775aXl5dq1Kih0aNHKyMjQ5KUnp6uxo0bq1atWkpKSnI+LiEhQSEhIYqMjFR2drakXw8LKleunPbt26c2bdrIz89Pd911lwYPHqzU1NRbZjx+/Lh69OihypUry26363e/+53effdd5eTkSJKOHTumu+66S5I0btw452F9BTkka/ny5bpw4YJeeOEF9ezZU4cPH9amTZuc23v16qUHH3xQkvTMM8/IZrMpMjJS1apV0759+7Rx40bn611/6FNycrKGDx+u6tWry8vLS3fffbeioqJ05coVl9e32WwaPHiwZs+erd/97ney2+2aP39+nlkTEhI0Z84ctW/f3qX4XFOnTh29/PLL2rdvn5YvX+7yGnkdEnb9YWvz5s3Tn/70J0m/Fqlr7+lme7byOuytMN737Th37pwGDRqkevXqqVy5cqpcubIeeeQRff/99y7zjh07JpvNpnfeeUeTJ09W9erVVa5cObVo0UI//vhjruedN2+ewsPDnd+Hee0pzEteh71d+7n45Zdf1LFjR5UrV05hYWEaNmyY8+fsmpMnT+rpp5+Wv7+/goKC1L17d23btu2W/0YAUBDs+QFQamVnZysrK0uGYejMmTP6+9//ritXrqhbt27OOenp6WrdurWOHDmicePGqWHDhvr+++81YcIE7dq1S//617/k7e2tf/zjH2rSpIn69OmjpUuXKicnR927d5dhGFq0aJHLnoerV6+qY8eO6t+/v0aNGqXNmzcrJiZG8fHxNz3k7ty5c2rZsqUyMzP15ptvqlq1avrnP/+p4cOH68iRI5o5c6aqVKmi1atX67HHHlPfvn31wgsvSJKzEN1MXFyc7Ha7unfvrosXL2rChAmKi4tzFp7XXntNzZo104svvqjx48erdevWCggIUEZGhp5++mkFBgZq5syZkiS73S7p10PTWrVqpZMnT+rVV19Vw4YNtW/fPr3++uvas2eP1q1bJ5vN5sywfPlyff/993r99dcVEhKiypUr55l1w4YNysrKUpcuXfJ9P126dNGrr76qtWvX6qmnnrrl+7/m8ccf1/jx4/Xqq69qxowZzsOzatasWeDnKKz3fb2srKxcY9dK9vUuXrwoSRo7dqxCQkKUkpKiZcuWKTIyUt98840iIyNd5s+YMUN169bV1KlTJf36796xY0cdPXpUgYGBkn4tPr1799Yf/vAHvfvuu0pKSlJ0dLQyMjJUpszt/d706tWr6ty5s/r27athw4bpu+++05tv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LVq0SBMmTNBHH31kdjyg0G3fvt2l+EiSp6enRo4cqaZNm5qYDLdC+UGBff311/kex5qYmFi0YQCTREREOJe6Bqyqd+/eysrK0siRI5Wamqpu3brp7rvv1nvvvac///nPZscDCl1AQICOHz+uunXruoyfOHFC/v7+JqVCQbDgAQqkTJlbnx7GuvYo7fK7wJ3NZpPdbpeXl1cRJwKKXlZWlhYuXKj27dsrJCRE58+fV05OjipXrmx2NKDI/PWvf9WyZcv0zjvvqGXLlrLZbNq0aZNGjBihp556SlOnTjU7IvJB+QGAArrVBe7uuece9erVS2PHji3QLwyAksrX11cHDhzIdc4PYBWZmZkaMWKEZs+eraysLElS2bJlNXDgQE2cOFF2u93khMgPh70BQAHNmzdPo0ePVq9evdSsWTMZhqFt27Zp/vz5GjNmjM6dO6d33nlHdrtdr776qtlxgULTvHlz/fTTT5QfWFJ2dra2bNmisWPHasKECTpy5IgMw1CtWrXk6+trdjzcAnt+UCBffvllgeZ17ty5kJMA5mnTpo369++vrl27uoz/4x//0AcffKBvvvlGn3zyid566y0dPHjQpJRA4fv88881atQoDRkyRE2aNJGfn5/L9oYNG5qUDCga3t7eOnDggKpXr252FLiJ8oMC4Zwf4NdDfX7++WfVrl3bZfw///mPGjVqpNTUVB09elT169dXamqqSSmBwpfX/xNsNpsMw+D/BbCE3//+95o4caLatGljdhS4icPeUCA5OTlmRwBMd8899yguLk4TJ050GY+Li1NYWJgk6cKFCypfvrwZ8YAic/ToUbMjAKZ66623NHz4cL355pt57v0MCAgwKRluhT0/KBSPP/64PvroI1WpUsXsKMAd8+WXX+pPf/qT6tatq9///vey2Wzatm2bDhw4oKVLl6pTp06aNWuW/vOf/2jy5MlmxwUAFJLr935evxAOez+LP8oPCoW/v79+/vln1ahRw+wowB0VHx+vWbNm6fDhwzIMQ3Xr1lX//v2VmJioe++91+x4QJH4+OOPb7r9+eefL6IkgDk2btx40+2tWrUqoiRwF+UHhYLyAytITEzUwoULNWfOHO3atYvf9MEybjy08+rVq0pNTZWXl5d8fX118eJFk5IBwM1xIQoAcNP69evVo0cPhYaGavr06erQoYO2b99udiygyFy6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",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Final Missing Values:\n",
      "Patient_ID        0\n",
      "Age               0\n",
      "Gender            0\n",
      "Blood_Pressure    0\n",
      "Cholesterol       0\n",
      "Diabetes          0\n",
      "Heart_Disease     0\n",
      "dtype: int64\n",
      "\n",
      "Final Dataset Info:\n",
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Index: 500 entries, 0 to 499\n",
      "Data columns (total 7 columns):\n",
      " #   Column          Non-Null Count  Dtype  \n",
      "---  ------          --------------  -----  \n",
      " 0   Patient_ID      500 non-null    float64\n",
      " 1   Age             500 non-null    float64\n",
      " 2   Gender          500 non-null    int32  \n",
      " 3   Blood_Pressure  500 non-null    float64\n",
      " 4   Cholesterol     500 non-null    float64\n",
      " 5   Diabetes        500 non-null    int32  \n",
      " 6   Heart_Disease   500 non-null    int32  \n",
      "dtypes: float64(4), int32(3)\n",
      "memory usage: 25.4 KB\n",
      "None\n",
      "\n",
      "Cleaned dataset saved successfully!\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.preprocessing import MinMaxScaler, StandardScaler, LabelEncoder\n",
    "\n",
    "# Load the dataset\n",
    "df = pd.read_csv(r\"C:\\Users\\K.vennela\\Downloads\\Day_15_Healthcare_Data.csv\")\n",
    "\n",
    "# Display initial dataset info\n",
    "print(\"Initial Dataset Info:\")\n",
    "print(df.info())\n",
    "print(\"\\nMissing Values:\")\n",
    "print(df.isna().sum())\n",
    "\n",
    "# Handling Missing Data\n",
    "for column in df.select_dtypes(include=[\"number\"]):\n",
    "    df[column].fillna(df[column].median(), inplace=True)  # Median imputation for numerical columns\n",
    "\n",
    "for column in df.select_dtypes(include=[\"object\"]):\n",
    "    df[column].fillna(df[column].mode()[0], inplace=True)  # Mode imputation for categorical columns\n",
    "\n",
    "# Detect and Handle Duplicates\n",
    "print(\"\\nDuplicate Records Count:\", df.duplicated().sum())\n",
    "df.drop_duplicates(inplace=True)\n",
    "\n",
    "# Detect and Handle Outliers using IQR method\n",
    "def handle_outliers(df, column):\n",
    "    Q1 = df[column].quantile(0.25)\n",
    "    Q3 = df[column].quantile(0.75)\n",
    "    IQR = Q3 - Q1\n",
    "    lower_bound = Q1 - 1.5 * IQR\n",
    "    upper_bound = Q3 + 1.5 * IQR\n",
    "    df[column] = np.where(df[column] < lower_bound, lower_bound, df[column])\n",
    "    df[column] = np.where(df[column] > upper_bound, upper_bound, df[column])\n",
    "\n",
    "for column in df.select_dtypes(include=[\"number\"]):\n",
    "    handle_outliers(df, column)\n",
    "\n",
    "# Visualizing outliers after handling\n",
    "plt.figure(figsize=(10,6))\n",
    "sns.boxplot(data=df.select_dtypes(include=[\"number\"]))\n",
    "plt.title(\"Boxplot After Outlier Handling\")\n",
    "plt.xticks(rotation=90)\n",
    "plt.show()\n",
    "\n",
    "# Standardizing and Normalizing Data\n",
    "scaler = MinMaxScaler()  # Change to StandardScaler() if needed\n",
    "df[df.select_dtypes(include=[\"number\"]).columns] = scaler.fit_transform(df.select_dtypes(include=[\"number\"]))\n",
    "\n",
    "# Encoding Categorical Variables\n",
    "encoder = LabelEncoder()\n",
    "for column in df.select_dtypes(include=[\"object\"]):\n",
    "    df[column] = encoder.fit_transform(df[column])\n",
    "\n",
    "# Data Validation\n",
    "print(\"\\nFinal Missing Values:\")\n",
    "print(df.isna().sum())\n",
    "print(\"\\nFinal Dataset Info:\")\n",
    "print(df.info())\n",
    "\n",
    "# Save the cleaned dataset\n",
    "df.to_csv(\"cleaned_healthcare_data.csv\", index=False)\n",
    "print(\"\\nCleaned dataset saved successfully!\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d6d2e60d-33fe-45ef-9a39-f866e8a85b01",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:base] *",
   "language": "python",
   "name": "conda-base-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
